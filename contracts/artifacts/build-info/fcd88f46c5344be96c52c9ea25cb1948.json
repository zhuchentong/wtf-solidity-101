{
	"id": "fcd88f46c5344be96c52c9ea25cb1948",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.25",
	"solcLongVersion": "0.8.25+commit.b61c2a91",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/34_ERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// EIP & ERC\n// ERC是EIP的一部分\n\n// ERC165: 智能合约可以声明它支持的接口供别人检查, 可以用它来检查合约是否支持了ERC721，ERC1155的接口。\n// supportsInterface\n\n// IERC721: 使用tokenId来标识特定的非同质化代币，授权转账需要明确的tokenId，而ERC20只需要转账数额\n\n// IERC721事件:\n// Transfer\n// Approval\n// ApprovalForAll\n\n// IERC721函数：\n// balanceOf\n// ownerOf\n// transferFrom\n// safeTransferFrom\n// approve\n// getApproved\n// setApprovalForAll\n// isApprovedForAll\n// safeTransferFrom\n\n// address(to).isContract() 可以来判断地址是否是合约地址\n\n// ERC721使用_checkOnERC721Received来检查目标合约是否实现了onERC721Received函数（selector）\n\n// IERC721Metadata 是 ERC721 的扩展接口，实现了三个metadata的查询\n// name() 返回代币名称\n// symbol() 返回代币代号\n// tokenURI() 通过tokenId查询metadata的链接URL, ERC721特有的函数 \n\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [],
			"evmVersion": "berlin"
		}
	},
	"output": {
		"sources": {
			"contracts/34_ERC721.sol": {
				"ast": {
					"absolutePath": "contracts/34_ERC721.sol",
					"exportedSymbols": {},
					"id": 2,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						}
					],
					"src": "32:991:0"
				},
				"id": 0
			}
		}
	}
}